# Generated by Django 3.2.9 on 2022-03-06 19:29

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('eld', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BufferRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_start', models.IntegerField()),
                ('sequence_end', models.IntegerField()),
                ('total', models.IntegerField()),
                ('storage', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='DriverBehavior',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cruise_control_speed', models.FloatField()),
                ('cruise_control_status', models.SmallIntegerField(choices=[('cruise_accelerate', 1), ('cruise_accelerate_override', 2), ('cruise_decelerate', 3), ('cruise_hold', 4), ('cruise_invalid', 5), ('cruise_na', 6), ('cruise_off', 7), ('cruise_resume', 8), ('cruise_set', 9)])),
                ('throttle_position', models.FloatField()),
                ('acceleration_position', models.FloatField()),
                ('brake', models.FloatField()),
                ('seat', models.SmallIntegerField(choices=[('belt_invalid', 1), ('belt_locked', 2), ('belt_na', 3), ('belt_unknown', 4), ('belt_unlocked', 5)])),
                ('steering_wheel', models.FloatField()),
                ('abc_status', models.SmallIntegerField(choices=[('abc_active', 1), ('abc_invalid', 2), ('abc_na', 3), ('abc_passive', 4), ('abc_reserved', 5)])),
                ('traction_status', models.SmallIntegerField(choices=[('traction_error', 1), ('traction_invalid', 2), ('traction_na', 3), ('traction_off', 4), ('traction_on', 5)])),
                ('stability_status', models.SmallIntegerField(choices=[('stability_active', 1), ('stability_invalid', 2), ('stability_na', 3), ('stability_passive', 4), ('stability_reserved', 5)])),
                ('break_system_pressure', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Emission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nox_inlet', models.FloatField()),
                ('nox_outlet', models.FloatField()),
                ('ash_load', models.FloatField()),
                ('dpf_soot', models.FloatField()),
                ('dpf_regeneration', models.SmallIntegerField()),
                ('dpf_differential_pressure', models.FloatField()),
                ('egr_valve_position', models.FloatField()),
                ('after_treatment_fuel_pressure', models.FloatField()),
                ('engine_exhaust_temperature', models.FloatField()),
                ('exhaust_temperature_1', models.FloatField()),
                ('exhaust_temperature_2', models.FloatField()),
                ('exhaust_temperature_3', models.FloatField()),
                ('def_level', models.FloatField()),
                ('def_tank_temperature', models.FloatField()),
                ('scr_inducement_fault_state', models.SmallIntegerField(choices=[('scrinducement_inactive', 1), ('scrinducement_invalid', 2), ('scrinducement_level_1', 3), ('scrinducement_level_2', 4), ('scrinducement_level_3', 5), ('scrinducement_level_4', 6), ('scrinducement_level_5', 7), ('scrinducement_na', 8), ('scrinducement_temporary_override', 9)])),
            ],
        ),
        migrations.CreateModel(
            name='EngineCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vin', models.CharField(max_length=150)),
                ('odometer', models.FloatField()),
                ('engine_hours', models.FloatField()),
                ('time', models.BigIntegerField()),
                ('sequence_number', models.IntegerField()),
                ('type', models.IntegerField(choices=[('engine_on', 1), ('engine_off', 2), ('newVin', 3)])),
            ],
            options={
                'permissions': [('driver', 'can add status')],
            },
        ),
        migrations.CreateModel(
            name='EngineRecordLive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oil_pressure', models.FloatField()),
                ('turbo_boost', models.FloatField()),
                ('intake_pressure', models.FloatField()),
                ('fuel_pressure', models.FloatField()),
                ('load', models.FloatField()),
                ('mass_air_flow', models.FloatField()),
                ('turbo_rpm', models.FloatField()),
                ('intake_temperature', models.FloatField()),
                ('coolant_temperature', models.FloatField()),
                ('oil_temperature', models.FloatField()),
                ('fuel_temperature', models.FloatField()),
                ('change_cooler_temperature', models.FloatField()),
                ('torque', models.FloatField()),
                ('oil_level', models.FloatField()),
                ('coolant_level', models.FloatField()),
                ('trip_fuel', models.FloatField()),
                ('fuel_economy', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='FuelRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel_level', models.FloatField()),
                ('integrated_fuel', models.FloatField()),
                ('total_fuel_consumed', models.FloatField()),
                ('fuel_rate', models.FloatField()),
                ('idle_fuel_consumed', models.FloatField()),
                ('idle_time', models.FloatField()),
                ('high_rpm_state', models.SmallIntegerField(choices=[('bad', 1), ('good', 2), ('invalid', 3), ('normal', 4), ('terrible', 5), ('warming', 6)])),
                ('unsteady_state', models.SmallIntegerField(choices=[('bad', 1), ('good', 2), ('invalid', 3), ('normal', 4), ('terrible', 5), ('warming', 6)])),
                ('engine_power_state', models.SmallIntegerField(choices=[('bad', 1), ('good', 2), ('invalid', 3), ('normal', 4), ('terrible', 5), ('warming', 6)])),
                ('accel_state', models.SmallIntegerField(choices=[('bad', 1), ('good', 2), ('invalid', 3), ('normal', 4), ('terrible', 5), ('warming', 6)])),
                ('eco', models.SmallIntegerField(choices=[('bad', 1), ('good', 2), ('invalid', 3), ('normal', 4), ('terrible', 5), ('warming', 6)])),
                ('anticipate_state', models.SmallIntegerField(choices=[('bad', 1), ('good', 2), ('invalid', 3), ('normal', 4), ('terrible', 5), ('warming', 6)])),
            ],
        ),
        migrations.CreateModel(
            name='NewTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_time', models.DateTimeField()),
                ('time', models.DateTimeField()),
                ('sequence_number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Transmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('output_shaft_rpm', models.FloatField()),
                ('gear', models.IntegerField()),
                ('request_gear_status', models.IntegerField()),
                ('transmission_oil_temperature', models.FloatField()),
                ('torque_converter_lockup_status', models.SmallIntegerField(choices=[('torque_cnv_lockup_disengaged', 1), ('torque_cnv_lockup_engaged', 2), ('torque_cnv_lockup_error', 3), ('torque_cnv_lockup_invalid', 4), ('torque_cnv_lockup_na', 5)])),
            ],
        ),
        migrations.CreateModel(
            name='PowerOn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hard_boots', models.CharField(max_length=100)),
                ('crashes', models.CharField(max_length=100)),
                ('time', models.DateTimeField()),
                ('sequence_number', models.IntegerField()),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eld.drivers')),
            ],
        ),
        migrations.CreateModel(
            name='MotionPeriodic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rpm', models.FloatField()),
                ('speed', models.FloatField()),
                ('odometer', models.FloatField()),
                ('engineHours', models.FloatField()),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('gps_speed', models.IntegerField()),
                ('course', models.IntegerField(null=True)),
                ('numsats', models.IntegerField(null=True)),
                ('altitude', models.IntegerField(null=True)),
                ('dop', models.FloatField(null=True)),
                ('time', models.BigIntegerField(null=True)),
                ('sequence_number', models.IntegerField(null=True)),
                ('country', models.CharField(blank=True, editable=False, max_length=500, null=True)),
                ('type', models.IntegerField(choices=[(1, 'motion_start'), ('motion_stop', 2), ('periodic', 3)])),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eld.drivers')),
            ],
        ),
        migrations.CreateModel(
            name='LiveData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engine_state', models.BooleanField()),
                ('vin', models.CharField(max_length=255)),
                ('speed', models.FloatField()),
                ('odometer', models.FloatField()),
                ('trip_distance', models.FloatField()),
                ('engine_hours', models.FloatField()),
                ('trip_hours', models.FloatField()),
                ('battery_voltage', models.FloatField()),
                ('date', models.FloatField()),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('gps_speed', models.IntegerField()),
                ('course', models.IntegerField()),
                ('number_of_satellites', models.IntegerField()),
                ('altitude', models.FloatField()),
                ('dop', models.FloatField()),
                ('sequence_number', models.IntegerField()),
                ('firmware_version', models.CharField(max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eld.drivers')),
            ],
        ),
        migrations.CreateModel(
            name='DriverStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('OFF', 'OFF'), ('ON', 'ON'), ('SB', 'SB'), ('D', 'D')], max_length=150)),
                ('cr_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eld.drivers')),
            ],
        ),
    ]
